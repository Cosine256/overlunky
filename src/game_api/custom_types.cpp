#include "custom_types.hpp"
#include "entity.hpp"

const std::map<CUSTOM_TYPE, std::string> custom_type_names = {
    {CUSTOM_TYPE::ACIDBUBBLE, "ACIDBUBBLE"},
    {CUSTOM_TYPE::ALIEN, "ALIEN"},
    {CUSTOM_TYPE::ALTAR, "ALTAR"},
    {CUSTOM_TYPE::AMMIT, "AMMIT"},
    {CUSTOM_TYPE::ANKHPOWERUP, "ANKHPOWERUP"},
    {CUSTOM_TYPE::ANUBIS, "ANUBIS"},
    {CUSTOM_TYPE::APEPHEAD, "APEPHEAD"},
    {CUSTOM_TYPE::APEPPART, "APEPPART"},
    {CUSTOM_TYPE::ARROW, "ARROW"},
    {CUSTOM_TYPE::ARROWTRAP, "ARROWTRAP"},
    {CUSTOM_TYPE::AXOLOTL, "AXOLOTL"},
    {CUSTOM_TYPE::AXOLOTLSHOT, "AXOLOTLSHOT"},
    {CUSTOM_TYPE::BACKPACK, "BACKPACK"},
    {CUSTOM_TYPE::BAT, "BAT"},
    {CUSTOM_TYPE::BEE, "BEE"},
    {CUSTOM_TYPE::BEG, "BEG"},
    {CUSTOM_TYPE::BGBACKLAYERDOOR, "BGBACKLAYERDOOR"},
    {CUSTOM_TYPE::BGEGGSHIPROOM, "BGEGGSHIPROOM"},
    {CUSTOM_TYPE::BGFLOATINGDEBRIS, "BGFLOATINGDEBRIS"},
    {CUSTOM_TYPE::BGMOVINGSTAR, "BGMOVINGSTAR"},
    {CUSTOM_TYPE::BGRELATIVEELEMENT, "BGRELATIVEELEMENT"},
    {CUSTOM_TYPE::BGSHOOTINGSTAR, "BGSHOOTINGSTAR"},
    {CUSTOM_TYPE::BGSHOPENTRENCE, "BGSHOPENTRENCE"},
    {CUSTOM_TYPE::BGSHOPKEEPERPRIME, "BGSHOPKEEPERPRIME"},
    {CUSTOM_TYPE::BGSURFACELAYER, "BGSURFACELAYER"},
    {CUSTOM_TYPE::BGSURFACESTAR, "BGSURFACESTAR"},
    {CUSTOM_TYPE::BGTUTORIALSIGN, "BGTUTORIALSIGN"},
    {CUSTOM_TYPE::BIGSPEARTRAP, "BIGSPEARTRAP"},
    {CUSTOM_TYPE::BIRDIES, "BIRDIES"},
    {CUSTOM_TYPE::BODYGUARD, "BODYGUARD"},
    {CUSTOM_TYPE::BOMB, "BOMB"},
    {CUSTOM_TYPE::BONEBLOCK, "BONEBLOCK"},
    {CUSTOM_TYPE::BOOMBOX, "BOOMBOX"},
    {CUSTOM_TYPE::BOOMERANG, "BOOMERANG"},
    {CUSTOM_TYPE::BOULDER, "BOULDER"},
    {CUSTOM_TYPE::BOULDERSPAWNER, "BOULDERSPAWNER"},
    {CUSTOM_TYPE::BULLET, "BULLET"},
    {CUSTOM_TYPE::BURNINGROPEEFFECT, "BURNINGROPEEFFECT"},
    {CUSTOM_TYPE::BUTTON, "BUTTON"},
    {CUSTOM_TYPE::CAMERAFLASH, "CAMERAFLASH"},
    {CUSTOM_TYPE::CAPE, "CAPE"},
    {CUSTOM_TYPE::CATMUMMY, "CATMUMMY"},
    {CUSTOM_TYPE::CAVEMAN, "CAVEMAN"},
    {CUSTOM_TYPE::CAVEMANSHOPKEEPER, "CAVEMANSHOPKEEPER"},
    {CUSTOM_TYPE::CHAIN, "CHAIN"},
    {CUSTOM_TYPE::CHAINEDPUSHBLOCK, "CHAINEDPUSHBLOCK"},
    {CUSTOM_TYPE::CHEST, "CHEST"},
    {CUSTOM_TYPE::CINEMATICANCHOR, "CINEMATICANCHOR"},
    {CUSTOM_TYPE::CITYOFGOLDDOOR, "CITYOFGOLDDOOR"},
    {CUSTOM_TYPE::CLAMBASE, "CLAMBASE"},
    {CUSTOM_TYPE::CLAW, "CLAW"},
    {CUSTOM_TYPE::CLIMBABLEROPE, "CLIMBABLEROPE"},
    {CUSTOM_TYPE::CLONEGUNSHOT, "CLONEGUNSHOT"},
    {CUSTOM_TYPE::COBRA, "COBRA"},
    {CUSTOM_TYPE::COFFIN, "COFFIN"},
    {CUSTOM_TYPE::COIN, "COIN"},
    {CUSTOM_TYPE::CONTAINER, "CONTAINER"},
    {CUSTOM_TYPE::CONVEYORBELT, "CONVEYORBELT"},
    {CUSTOM_TYPE::COOKFIRE, "COOKFIRE"},
    {CUSTOM_TYPE::CRABMAN, "CRABMAN"},
    {CUSTOM_TYPE::CRITTER, "CRITTER"},
    {CUSTOM_TYPE::CRITTERBEETLE, "CRITTERBEETLE"},
    {CUSTOM_TYPE::CRITTERBUTTERFLY, "CRITTERBUTTERFLY"},
    {CUSTOM_TYPE::CRITTERCRAB, "CRITTERCRAB"},
    {CUSTOM_TYPE::CRITTERDRONE, "CRITTERDRONE"},
    {CUSTOM_TYPE::CRITTERFIREFLY, "CRITTERFIREFLY"},
    {CUSTOM_TYPE::CRITTERFISH, "CRITTERFISH"},
    {CUSTOM_TYPE::CRITTERLOCUST, "CRITTERLOCUST"},
    {CUSTOM_TYPE::CRITTERPENGUIN, "CRITTERPENGUIN"},
    {CUSTOM_TYPE::CRITTERSLIME, "CRITTERSLIME"},
    {CUSTOM_TYPE::CRITTERSNAIL, "CRITTERSNAIL"},
    {CUSTOM_TYPE::CROCMAN, "CROCMAN"},
    {CUSTOM_TYPE::CROSSBEAM, "CROSSBEAM"},
    {CUSTOM_TYPE::CRUSHTRAP, "CRUSHTRAP"},
    {CUSTOM_TYPE::CURSEDEFFECT, "CURSEDEFFECT"},
    {CUSTOM_TYPE::CURSEDPOT, "CURSEDPOT"},
    {CUSTOM_TYPE::DECORATEDDOOR, "DECORATEDDOOR"},
    {CUSTOM_TYPE::DECOREGENERATINGBLOCK, "DECOREGENERATINGBLOCK"},
    {CUSTOM_TYPE::DESTRUCTIBLEBG, "DESTRUCTIBLEBG"},
    {CUSTOM_TYPE::DMALIENBLAST, "DMALIENBLAST"},
    {CUSTOM_TYPE::DMSPAWNING, "DMSPAWNING"},
    {CUSTOM_TYPE::DOOR, "DOOR"},
    {CUSTOM_TYPE::DRILL, "DRILL"},
    {CUSTOM_TYPE::DUSTWALLAPEP, "DUSTWALLAPEP"},
    {CUSTOM_TYPE::EGGPLANTMINISTER, "EGGPLANTMINISTER"},
    {CUSTOM_TYPE::EGGPLANTTHROWER, "EGGPLANTTHROWER"},
    {CUSTOM_TYPE::EGGSAC, "EGGSAC"},
    {CUSTOM_TYPE::EGGSHIPCENTERJETFLAME, "EGGSHIPCENTERJETFLAME"},
    {CUSTOM_TYPE::EGGSHIPDOOR, "EGGSHIPDOOR"},
    {CUSTOM_TYPE::EGGSHIPDOORS, "EGGSHIPDOORS"},
    {CUSTOM_TYPE::ELEVATOR, "ELEVATOR"},
    {CUSTOM_TYPE::EMPRESSGRAVE, "EMPRESSGRAVE"},
    {CUSTOM_TYPE::ENTITY, "ENTITY"},
    {CUSTOM_TYPE::EXCALIBUR, "EXCALIBUR"},
    {CUSTOM_TYPE::EXITDOOR, "EXITDOOR"},
    {CUSTOM_TYPE::EXPLOSION, "EXPLOSION"},
    {CUSTOM_TYPE::FALLINGPLATFORM, "FALLINGPLATFORM"},
    {CUSTOM_TYPE::FIREBALL, "FIREBALL"},
    {CUSTOM_TYPE::FIREBUG, "FIREBUG"},
    {CUSTOM_TYPE::FIREBUGUNCHAINED, "FIREBUGUNCHAINED"},
    {CUSTOM_TYPE::FIREFROG, "FIREFROG"},
    {CUSTOM_TYPE::FISH, "FISH"},
    {CUSTOM_TYPE::FLAME, "FLAME"},
    {CUSTOM_TYPE::FLAMESIZE, "FLAMESIZE"},
    {CUSTOM_TYPE::FLOOR, "FLOOR"},
    {CUSTOM_TYPE::FLY, "FLY"},
    {CUSTOM_TYPE::FLYHEAD, "FLYHEAD"},
    {CUSTOM_TYPE::FORCEFIELD, "FORCEFIELD"},
    {CUSTOM_TYPE::FORESTSISTER, "FORESTSISTER"},
    {CUSTOM_TYPE::FROG, "FROG"},
    {CUSTOM_TYPE::FROSTBREATHEFFECT, "FROSTBREATHEFFECT"},
    {CUSTOM_TYPE::FROZENLIQUID, "FROZENLIQUID"},
    {CUSTOM_TYPE::FXALIENBLAST, "FXALIENBLAST"},
    {CUSTOM_TYPE::FXANKHBROKENPIECE, "FXANKHBROKENPIECE"},
    {CUSTOM_TYPE::FXANKHROTATINGSPARK, "FXANKHROTATINGSPARK"},
    {CUSTOM_TYPE::FXCOMPASS, "FXCOMPASS"},
    {CUSTOM_TYPE::FXEMPRESS, "FXEMPRESS"},
    {CUSTOM_TYPE::FXFIREFLYLIGHT, "FXFIREFLYLIGHT"},
    {CUSTOM_TYPE::FXHUNDUNNECKPIECE, "FXHUNDUNNECKPIECE"},
    {CUSTOM_TYPE::FXJELLYFISHSTAR, "FXJELLYFISHSTAR"},
    {CUSTOM_TYPE::FXJETPACKFLAME, "FXJETPACKFLAME"},
    {CUSTOM_TYPE::FXKINGUSLIDING, "FXKINGUSLIDING"},
    {CUSTOM_TYPE::FXLAMASSUATTACK, "FXLAMASSUATTACK"},
    {CUSTOM_TYPE::FXMAINEXITDOOR, "FXMAINEXITDOOR"},
    {CUSTOM_TYPE::FXNECROMANCERANKH, "FXNECROMANCERANKH"},
    {CUSTOM_TYPE::FXOUROBORODRAGONPART, "FXOUROBORODRAGONPART"},
    {CUSTOM_TYPE::FXOUROBOROOCCLUDER, "FXOUROBOROOCCLUDER"},
    {CUSTOM_TYPE::FXPICKUPEFFECT, "FXPICKUPEFFECT"},
    {CUSTOM_TYPE::FXPLAYERINDICATOR, "FXPLAYERINDICATOR"},
    {CUSTOM_TYPE::FXQUICKSAND, "FXQUICKSAND"},
    {CUSTOM_TYPE::FXSALECONTAINER, "FXSALECONTAINER"},
    {CUSTOM_TYPE::FXSHOTGUNBLAST, "FXSHOTGUNBLAST"},
    {CUSTOM_TYPE::FXSORCERESSATTACK, "FXSORCERESSATTACK"},
    {CUSTOM_TYPE::FXSPARKSMALL, "FXSPARKSMALL"},
    {CUSTOM_TYPE::FXSPRINGTRAPRING, "FXSPRINGTRAPRING"},
    {CUSTOM_TYPE::FXTIAMATHEAD, "FXTIAMATHEAD"},
    {CUSTOM_TYPE::FXTIAMATTAIL, "FXTIAMATTAIL"},
    {CUSTOM_TYPE::FXTIAMATTORSO, "FXTIAMATTORSO"},
    {CUSTOM_TYPE::FXTORNJOURNALPAGE, "FXTORNJOURNALPAGE"},
    {CUSTOM_TYPE::FXUNDERWATERBUBBLE, "FXUNDERWATERBUBBLE"},
    {CUSTOM_TYPE::FXVATBUBBLE, "FXVATBUBBLE"},
    {CUSTOM_TYPE::FXWATERDROP, "FXWATERDROP"},
    {CUSTOM_TYPE::FXWEBBEDEFFECT, "FXWEBBEDEFFECT"},
    {CUSTOM_TYPE::FXWITCHDOCTORHINT, "FXWITCHDOCTORHINT"},
    {CUSTOM_TYPE::GENERATOR, "GENERATOR"},
    {CUSTOM_TYPE::GHIST, "GHIST"},
    {CUSTOM_TYPE::GHOST, "GHOST"},
    {CUSTOM_TYPE::GHOSTBREATH, "GHOSTBREATH"},
    {CUSTOM_TYPE::GIANTCLAMTOP, "GIANTCLAMTOP"},
    {CUSTOM_TYPE::GIANTFISH, "GIANTFISH"},
    {CUSTOM_TYPE::GIANTFLY, "GIANTFLY"},
    {CUSTOM_TYPE::GIANTFROG, "GIANTFROG"},
    {CUSTOM_TYPE::GOLDBAR, "GOLDBAR"},
    {CUSTOM_TYPE::GOLDMONKEY, "GOLDMONKEY"},
    {CUSTOM_TYPE::GRUB, "GRUB"},
    {CUSTOM_TYPE::GUN, "GUN"},
    {CUSTOM_TYPE::HANGANCHOR, "HANGANCHOR"},
    {CUSTOM_TYPE::HANGSPIDER, "HANGSPIDER"},
    {CUSTOM_TYPE::HANGSTRAND, "HANGSTRAND"},
    {CUSTOM_TYPE::HERMITCRAB, "HERMITCRAB"},
    {CUSTOM_TYPE::HONEY, "HONEY"},
    {CUSTOM_TYPE::HORIZONTALFORCEFIELD, "HORIZONTALFORCEFIELD"},
    {CUSTOM_TYPE::HORNEDLIZARD, "HORNEDLIZARD"},
    {CUSTOM_TYPE::HOVERPACK, "HOVERPACK"},
    {CUSTOM_TYPE::HUNDUN, "HUNDUN"},
    {CUSTOM_TYPE::HUNDUNCHEST, "HUNDUNCHEST"},
    {CUSTOM_TYPE::HUNDUNHEAD, "HUNDUNHEAD"},
    {CUSTOM_TYPE::ICESLIDINGSOUND, "ICESLIDINGSOUND"},
    {CUSTOM_TYPE::IDOL, "IDOL"},
    {CUSTOM_TYPE::IMP, "IMP"},
    {CUSTOM_TYPE::JETPACK, "JETPACK"},
    {CUSTOM_TYPE::JIANGSHI, "JIANGSHI"},
    {CUSTOM_TYPE::JUMPDOG, "JUMPDOG"},
    {CUSTOM_TYPE::JUNGLESPEARCOSMETIC, "JUNGLESPEARCOSMETIC"},
    {CUSTOM_TYPE::JUNGLETRAPTRIGGER, "JUNGLETRAPTRIGGER"},
    {CUSTOM_TYPE::KAPALAPOWERUP, "KAPALAPOWERUP"},
    {CUSTOM_TYPE::KINGU, "KINGU"},
    {CUSTOM_TYPE::LAHAMU, "LAHAMU"},
    {CUSTOM_TYPE::LAMASSU, "LAMASSU"},
    {CUSTOM_TYPE::LAMPFLAME, "LAMPFLAME"},
    {CUSTOM_TYPE::LANDMINE, "LANDMINE"},
    {CUSTOM_TYPE::LASERBEAM, "LASERBEAM"},
    {CUSTOM_TYPE::LASERTRAP, "LASERTRAP"},
    {CUSTOM_TYPE::LAVA, "LAVA"},
    {CUSTOM_TYPE::LAVAMANDER, "LAVAMANDER"},
    {CUSTOM_TYPE::LEAF, "LEAF"},
    {CUSTOM_TYPE::LEPRECHAUN, "LEPRECHAUN"},
    {CUSTOM_TYPE::LIGHTARROW, "LIGHTARROW"},
    {CUSTOM_TYPE::LIGHTARROWPLATFORM, "LIGHTARROWPLATFORM"},
    {CUSTOM_TYPE::LIGHTEMITTER, "LIGHTEMITTER"},
    {CUSTOM_TYPE::LIGHTSHOT, "LIGHTSHOT"},
    {CUSTOM_TYPE::LIMBANCHOR, "LIMBANCHOR"},
    {CUSTOM_TYPE::LIQUID, "LIQUID"},
    {CUSTOM_TYPE::LIQUIDSURFACE, "LIQUIDSURFACE"},
    {CUSTOM_TYPE::LOCKEDDOOR, "LOCKEDDOOR"},
    {CUSTOM_TYPE::LOGICALANCHOVYFLOCK, "LOGICALANCHOVYFLOCK"},
    {CUSTOM_TYPE::LOGICALCONVEYORBELTSOUND, "LOGICALCONVEYORBELTSOUND"},
    {CUSTOM_TYPE::LOGICALDOOR, "LOGICALDOOR"},
    {CUSTOM_TYPE::LOGICALDRAIN, "LOGICALDRAIN"},
    {CUSTOM_TYPE::LOGICALLIQUIDSTREAMSOUND, "LOGICALLIQUIDSTREAMSOUND"},
    {CUSTOM_TYPE::LOGICALMINIGAME, "LOGICALMINIGAME"},
    {CUSTOM_TYPE::LOGICALREGENERATINGBLOCK, "LOGICALREGENERATINGBLOCK"},
    {CUSTOM_TYPE::LOGICALSOUND, "LOGICALSOUND"},
    {CUSTOM_TYPE::LOGICALSTATICSOUND, "LOGICALSTATICSOUND"},
    {CUSTOM_TYPE::LOGICALTRAPTRIGGER, "LOGICALTRAPTRIGGER"},
    {CUSTOM_TYPE::MAGMAMAN, "MAGMAMAN"},
    {CUSTOM_TYPE::MAINEXIT, "MAINEXIT"},
    {CUSTOM_TYPE::MANTRAP, "MANTRAP"},
    {CUSTOM_TYPE::MATTOCK, "MATTOCK"},
    {CUSTOM_TYPE::MECH, "MECH"},
    {CUSTOM_TYPE::MEGAJELLYFISH, "MEGAJELLYFISH"},
    {CUSTOM_TYPE::MINIGAMEASTEROID, "MINIGAMEASTEROID"},
    {CUSTOM_TYPE::MINIGAMESHIP, "MINIGAMESHIP"},
    {CUSTOM_TYPE::MINIGAMESHIPOFFSET, "MINIGAMESHIPOFFSET"},
    {CUSTOM_TYPE::MOLE, "MOLE"},
    {CUSTOM_TYPE::MONKEY, "MONKEY"},
    {CUSTOM_TYPE::MONSTER, "MONSTER"},
    {CUSTOM_TYPE::MOSQUITO, "MOSQUITO"},
    {CUSTOM_TYPE::MOTHERSTATUE, "MOTHERSTATUE"},
    {CUSTOM_TYPE::MOUNT, "MOUNT"},
    {CUSTOM_TYPE::MOVABLE, "MOVABLE"},
    {CUSTOM_TYPE::MOVINGICON, "MOVINGICON"},
    {CUSTOM_TYPE::MUMMY, "MUMMY"},
    {CUSTOM_TYPE::MUMMYFLIESSOUND, "MUMMYFLIESSOUND"},
    {CUSTOM_TYPE::NECROMANCER, "NECROMANCER"},
    {CUSTOM_TYPE::NPC, "NPC"},
    {CUSTOM_TYPE::OCTOPUS, "OCTOPUS"},
    {CUSTOM_TYPE::OLMEC, "OLMEC"},
    {CUSTOM_TYPE::OLMECCANNON, "OLMECCANNON"},
    {CUSTOM_TYPE::OLMECFLOATER, "OLMECFLOATER"},
    {CUSTOM_TYPE::OLMITE, "OLMITE"},
    {CUSTOM_TYPE::ONFIREEFFECT, "ONFIREEFFECT"},
    {CUSTOM_TYPE::ORB, "ORB"},
    {CUSTOM_TYPE::OSIRISHAND, "OSIRISHAND"},
    {CUSTOM_TYPE::OSIRISHEAD, "OSIRISHEAD"},
    {CUSTOM_TYPE::OUROBOROCAMERAANCHOR, "OUROBOROCAMERAANCHOR"},
    {CUSTOM_TYPE::OUROBOROCAMERAZOOMIN, "OUROBOROCAMERAZOOMIN"},
    {CUSTOM_TYPE::PALACESIGN, "PALACESIGN"},
    {CUSTOM_TYPE::PARACHUTEPOWERUP, "PARACHUTEPOWERUP"},
    {CUSTOM_TYPE::PET, "PET"},
    {CUSTOM_TYPE::PIPE, "PIPE"},
    {CUSTOM_TYPE::PIPETRAVELERSOUND, "PIPETRAVELERSOUND"},
    {CUSTOM_TYPE::PLAYER, "PLAYER"},
    {CUSTOM_TYPE::PLAYERBAG, "PLAYERBAG"},
    {CUSTOM_TYPE::PLAYERGHOST, "PLAYERGHOST"},
    {CUSTOM_TYPE::POISONEDEFFECT, "POISONEDEFFECT"},
    {CUSTOM_TYPE::POLEDECO, "POLEDECO"},
    {CUSTOM_TYPE::PORTAL, "PORTAL"},
    {CUSTOM_TYPE::POT, "POT"},
    {CUSTOM_TYPE::POWERUP, "POWERUP"},
    {CUSTOM_TYPE::POWERUPCAPABLE, "POWERUPCAPABLE"},
    {CUSTOM_TYPE::PROTOSHOPKEEPER, "PROTOSHOPKEEPER"},
    {CUSTOM_TYPE::PUNISHBALL, "PUNISHBALL"},
    {CUSTOM_TYPE::PUSHBLOCK, "PUSHBLOCK"},
    {CUSTOM_TYPE::QILIN, "QILIN"},
    {CUSTOM_TYPE::QUICKSAND, "QUICKSAND"},
    {CUSTOM_TYPE::QUICKSANDSOUND, "QUICKSANDSOUND"},
    {CUSTOM_TYPE::QUILLBACK, "QUILLBACK"},
    {CUSTOM_TYPE::REGENBLOCK, "REGENBLOCK"},
    {CUSTOM_TYPE::ROBOT, "ROBOT"},
    {CUSTOM_TYPE::ROCKDOG, "ROCKDOG"},
    {CUSTOM_TYPE::ROLLINGITEM, "ROLLINGITEM"},
    {CUSTOM_TYPE::ROOMLIGHT, "ROOMLIGHT"},
    {CUSTOM_TYPE::ROOMOWNER, "ROOMOWNER"},
    {CUSTOM_TYPE::RUBBLE, "RUBBLE"},
    {CUSTOM_TYPE::SCARAB, "SCARAB"},
    {CUSTOM_TYPE::SCEPTERSHOT, "SCEPTERSHOT"},
    {CUSTOM_TYPE::SCORPION, "SCORPION"},
    {CUSTOM_TYPE::SHIELD, "SHIELD"},
    {CUSTOM_TYPE::SHOOTINGSTARSPAWNER, "SHOOTINGSTARSPAWNER"},
    {CUSTOM_TYPE::SHOPKEEPER, "SHOPKEEPER"},
    {CUSTOM_TYPE::SKELETON, "SKELETON"},
    {CUSTOM_TYPE::SKULLDROPTRAP, "SKULLDROPTRAP"},
    {CUSTOM_TYPE::SLEEPBUBBLE, "SLEEPBUBBLE"},
    {CUSTOM_TYPE::SLIDINGWALLCEILING, "SLIDINGWALLCEILING"},
    {CUSTOM_TYPE::SNAPTRAP, "SNAPTRAP"},
    {CUSTOM_TYPE::SORCERESS, "SORCERESS"},
    {CUSTOM_TYPE::SOUNDSHOT, "SOUNDSHOT"},
    {CUSTOM_TYPE::SPARK, "SPARK"},
    {CUSTOM_TYPE::SPARKTRAP, "SPARKTRAP"},
    {CUSTOM_TYPE::SPEAR, "SPEAR"},
    {CUSTOM_TYPE::SPECIALSHOT, "SPECIALSHOT"},
    {CUSTOM_TYPE::SPIDER, "SPIDER"},
    {CUSTOM_TYPE::SPIKEBALLTRAP, "SPIKEBALLTRAP"},
    {CUSTOM_TYPE::SPLASHBUBBLEGENERATOR, "SPLASHBUBBLEGENERATOR"},
    {CUSTOM_TYPE::STICKYTRAP, "STICKYTRAP"},
    {CUSTOM_TYPE::STRETCHCHAIN, "STRETCHCHAIN"},
    {CUSTOM_TYPE::SWITCH, "SWITCH"},
    {CUSTOM_TYPE::TADPOLE, "TADPOLE"},
    {CUSTOM_TYPE::TELEPORTER, "TELEPORTER"},
    {CUSTOM_TYPE::TELEPORTERBACKPACK, "TELEPORTERBACKPACK"},
    {CUSTOM_TYPE::TELEPORTINGBORDER, "TELEPORTINGBORDER"},
    {CUSTOM_TYPE::TELESCOPE, "TELESCOPE"},
    {CUSTOM_TYPE::TENTACLE, "TENTACLE"},
    {CUSTOM_TYPE::TENTACLEBOTTOM, "TENTACLEBOTTOM"},
    {CUSTOM_TYPE::TERRA, "TERRA"},
    {CUSTOM_TYPE::THINICE, "THINICE"},
    {CUSTOM_TYPE::TIAMAT, "TIAMAT"},
    {CUSTOM_TYPE::TIAMATSHOT, "TIAMATSHOT"},
    {CUSTOM_TYPE::TIMEDFORCEFIELD, "TIMEDFORCEFIELD"},
    {CUSTOM_TYPE::TIMEDPOWDERKEG, "TIMEDPOWDERKEG"},
    {CUSTOM_TYPE::TIMEDSHOT, "TIMEDSHOT"},
    {CUSTOM_TYPE::TORCH, "TORCH"},
    {CUSTOM_TYPE::TORCHFLAME, "TORCHFLAME"},
    {CUSTOM_TYPE::TOTEMTRAP, "TOTEMTRAP"},
    {CUSTOM_TYPE::TRANSFERFLOOR, "TRANSFERFLOOR"},
    {CUSTOM_TYPE::TRAPPART, "TRAPPART"},
    {CUSTOM_TYPE::TREASURE, "TREASURE"},
    {CUSTOM_TYPE::TREASUREHOOK, "TREASUREHOOK"},
    {CUSTOM_TYPE::TRUECROWNPOWERUP, "TRUECROWNPOWERUP"},
    {CUSTOM_TYPE::TUN, "TUN"},
    {CUSTOM_TYPE::TV, "TV"},
    {CUSTOM_TYPE::UDJATSOCKET, "UDJATSOCKET"},
    {CUSTOM_TYPE::UFO, "UFO"},
    {CUSTOM_TYPE::UNCHAINEDSPIKEBALL, "UNCHAINEDSPIKEBALL"},
    {CUSTOM_TYPE::USHABTI, "USHABTI"},
    {CUSTOM_TYPE::VAMPIRE, "VAMPIRE"},
    {CUSTOM_TYPE::VANHORSING, "VANHORSING"},
    {CUSTOM_TYPE::VLAD, "VLAD"},
    {CUSTOM_TYPE::VLADSCAPE, "VLADSCAPE"},
    {CUSTOM_TYPE::WADDLER, "WADDLER"},
    {CUSTOM_TYPE::WALKINGMONSTER, "WALKINGMONSTER"},
    {CUSTOM_TYPE::WALLTORCH, "WALLTORCH"},
    {CUSTOM_TYPE::WEBGUN, "WEBGUN"},
    {CUSTOM_TYPE::WEBSHOT, "WEBSHOT"},
    {CUSTOM_TYPE::WETEFFECT, "WETEFFECT"},
    {CUSTOM_TYPE::WITCHDOCTOR, "WITCHDOCTOR"},
    {CUSTOM_TYPE::WITCHDOCTORSKULL, "WITCHDOCTORSKULL"},
    {CUSTOM_TYPE::WOODENLOGTRAP, "WOODENLOGTRAP"},
    {CUSTOM_TYPE::YAMA, "YAMA"},
    {CUSTOM_TYPE::YANG, "YANG"},
    {CUSTOM_TYPE::YELLOWCAPE, "YELLOWCAPE"},
    {CUSTOM_TYPE::YETIKING, "YETIKING"},
    {CUSTOM_TYPE::YETIQUEEN, "YETIQUEEN"},
};

std::vector<ENT_TYPE> get_custom_entity_types(CUSTOM_TYPE type)
{
    if (type < CUSTOM_TYPE::ACIDBUBBLE)
        return {};

    switch (type)
    {
    case CUSTOM_TYPE::ACIDBUBBLE:
        return {to_id("ENT_TYPE_ITEM_CRABMAN_ACIDBUBBLE")};
    case CUSTOM_TYPE::ALIEN:
        return {to_id("ENT_TYPE_MONS_ALIEN")};
    case CUSTOM_TYPE::ALTAR:
        return {
            to_id("ENT_TYPE_FLOOR_ALTAR"),
            to_id("ENT_TYPE_FLOOR_DUAT_ALTAR"),
            to_id("ENT_TYPE_FLOOR_EGGPLANT_ALTAR"),
        };
    case CUSTOM_TYPE::AMMIT:
        return {to_id("ENT_TYPE_MONS_AMMIT")};
    case CUSTOM_TYPE::ANKHPOWERUP:
        return {to_id("ENT_TYPE_ITEM_POWERUP_ANKH")};
    case CUSTOM_TYPE::ANUBIS:
        return {
            to_id("ENT_TYPE_MONS_ANUBIS"),
            to_id("ENT_TYPE_MONS_ANUBIS2"),
        };
    case CUSTOM_TYPE::APEPHEAD:
        return {to_id("ENT_TYPE_MONS_APEP_HEAD")};
    case CUSTOM_TYPE::APEPPART:
        return {
            to_id("ENT_TYPE_MONS_APEP_HEAD"),
            to_id("ENT_TYPE_MONS_APEP_BODY"),
            to_id("ENT_TYPE_MONS_APEP_TAIL"),
        };
    case CUSTOM_TYPE::ARROW:
        return {
            to_id("ENT_TYPE_ITEM_WOODEN_ARROW"),
            to_id("ENT_TYPE_ITEM_METAL_ARROW"),
            to_id("ENT_TYPE_ITEM_LIGHT_ARROW"),
        };
    case CUSTOM_TYPE::ARROWTRAP:
        return {
            to_id("ENT_TYPE_FLOOR_ARROW_TRAP"),
            to_id("ENT_TYPE_FLOOR_POISONED_ARROW_TRAP"),
        };
    case CUSTOM_TYPE::AXOLOTL:
        return {to_id("ENT_TYPE_MOUNT_AXOLOTL")};
    case CUSTOM_TYPE::AXOLOTLSHOT:
        return {to_id("ENT_TYPE_ITEM_AXOLOTL_BUBBLESHOT")};
    case CUSTOM_TYPE::BACKPACK:
        return {
            to_id("ENT_TYPE_ITEM_CAPE"),
            to_id("ENT_TYPE_ITEM_VLADS_CAPE"),
            to_id("ENT_TYPE_ITEM_JETPACK"),
            to_id("ENT_TYPE_ITEM_JETPACK_MECH"),
            to_id("ENT_TYPE_ITEM_TELEPORTER_BACKPACK"),
            to_id("ENT_TYPE_ITEM_HOVERPACK"),
            to_id("ENT_TYPE_ITEM_POWERPACK"),
        };
    case CUSTOM_TYPE::BAT:
        return {to_id("ENT_TYPE_MONS_BAT")};
    case CUSTOM_TYPE::BEE:
        return {
            to_id("ENT_TYPE_MONS_BEE"),
            to_id("ENT_TYPE_MONS_QUEENBEE"),
        };
    case CUSTOM_TYPE::BEG:
        return {to_id("ENT_TYPE_MONS_HUNDUNS_SERVANT")};
    case CUSTOM_TYPE::BGBACKLAYERDOOR:
        return {to_id("ENT_TYPE_BG_DOOR_BACK_LAYER")};
    case CUSTOM_TYPE::BGEGGSHIPROOM:
        return {to_id("ENT_TYPE_BG_EGGSHIP_ROOM")};
    case CUSTOM_TYPE::BGFLOATINGDEBRIS:
        return {
            to_id("ENT_TYPE_BG_DUAT_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS"),
        };
    case CUSTOM_TYPE::BGMOVINGSTAR:
        return {to_id("ENT_TYPE_BG_SURFACE_MOVING_STAR")};
    case CUSTOM_TYPE::BGRELATIVEELEMENT:
        return {
            to_id("ENT_TYPE_BG_SURFACE_SHOOTING_STAR"),
            to_id("ENT_TYPE_BG_SURFACE_SHOOTING_STAR_TRAIL"),
            to_id("ENT_TYPE_BG_SURFACE_SHOOTING_STAR_TRAIL_PARTICLE"),
            to_id("ENT_TYPE_BG_SURFACE_NEBULA"),
            to_id("ENT_TYPE_BG_SURFACE_LAYER"),
            to_id("ENT_TYPE_BG_SURFACE_ENTITY"),
            to_id("ENT_TYPE_BG_SURFACE_OLMEC_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_PYRAMID_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS"),
        };
    case CUSTOM_TYPE::BGSHOOTINGSTAR:
        return {to_id("ENT_TYPE_BG_SURFACE_SHOOTING_STAR")};
    case CUSTOM_TYPE::BGSHOPENTRENCE:
        return {to_id("ENT_TYPE_BG_SHOP_ENTRANCEDOOR")};
    case CUSTOM_TYPE::BGSHOPKEEPERPRIME:
        return {to_id("ENT_TYPE_BG_VAT_SHOPKEEPER_PRIME")};
    case CUSTOM_TYPE::BGSURFACELAYER:
        return {
            to_id("ENT_TYPE_BG_SURFACE_LAYER"),
            to_id("ENT_TYPE_BG_SURFACE_ENTITY"),
            to_id("ENT_TYPE_BG_SURFACE_OLMEC_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_PYRAMID_LAYER"),
            to_id("ENT_TYPE_BG_DUAT_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_DUAT_FARFLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FLOATINGDEBRIS"),
            to_id("ENT_TYPE_BG_COSMIC_FARFLOATINGDEBRIS"),
        };
    case CUSTOM_TYPE::BGSURFACESTAR:
        return {
            to_id("ENT_TYPE_BG_SURFACE_STAR"),
            to_id("ENT_TYPE_BG_SURFACE_MOVING_STAR"),
            to_id("ENT_TYPE_BG_CONSTELLATION_STAR"),
            to_id("ENT_TYPE_BG_CONSTELLATION_CONNECTION"),
        };
    case CUSTOM_TYPE::BGTUTORIALSIGN:
        return {
            to_id("ENT_TYPE_BG_TUTORIAL_SIGN_BACK"),
            to_id("ENT_TYPE_BG_TUTORIAL_SIGN_FRONT"),
        };
    case CUSTOM_TYPE::BIGSPEARTRAP:
        return {to_id("ENT_TYPE_FLOOR_BIGSPEAR_TRAP")};
    case CUSTOM_TYPE::BIRDIES:
        return {to_id("ENT_TYPE_FX_BIRDIES")};
    case CUSTOM_TYPE::BODYGUARD:
        return {to_id("ENT_TYPE_MONS_BODYGUARD")};
    case CUSTOM_TYPE::BOMB:
        return {
            to_id("ENT_TYPE_ITEM_BOMB"),
            to_id("ENT_TYPE_ITEM_PASTEBOMB"),
        };
    case CUSTOM_TYPE::BONEBLOCK:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_BONEBLOCK")};
    case CUSTOM_TYPE::BOOMBOX:
        return {to_id("ENT_TYPE_ITEM_BOOMBOX")};
    case CUSTOM_TYPE::BOOMERANG:
        return {to_id("ENT_TYPE_ITEM_BOOMERANG")};
    case CUSTOM_TYPE::BOULDER:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_BOULDER")};
    case CUSTOM_TYPE::BOULDERSPAWNER:
        return {to_id("ENT_TYPE_LOGICAL_BOULDERSPAWNER")};
    case CUSTOM_TYPE::BULLET:
        return {to_id("ENT_TYPE_ITEM_BULLET")};
    case CUSTOM_TYPE::BURNINGROPEEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_BURNING_ROPE_EFFECT")};
    case CUSTOM_TYPE::BUTTON:
        return {to_id("ENT_TYPE_FX_BUTTON")};
    case CUSTOM_TYPE::CAMERAFLASH:
        return {to_id("ENT_TYPE_LOGICAL_CAMERA_FLASH")};
    case CUSTOM_TYPE::CAPE:
        return {
            to_id("ENT_TYPE_ITEM_CAPE"),
            to_id("ENT_TYPE_ITEM_VLADS_CAPE"),
        };
    case CUSTOM_TYPE::CATMUMMY:
        return {to_id("ENT_TYPE_MONS_CATMUMMY")};
    case CUSTOM_TYPE::CAVEMAN:
        return {to_id("ENT_TYPE_MONS_CAVEMAN")};
    case CUSTOM_TYPE::CAVEMANSHOPKEEPER:
        return {to_id("ENT_TYPE_MONS_CAVEMAN_SHOPKEEPER")};
    case CUSTOM_TYPE::CHAIN:
        return {
            to_id("ENT_TYPE_ITEM_CHAIN"),
            to_id("ENT_TYPE_ITEM_CHAIN_LASTPIECE"),
            to_id("ENT_TYPE_ITEM_SLIDINGWALL_CHAIN"),
            to_id("ENT_TYPE_ITEM_SLIDINGWALL_CHAIN_LASTPIECE"),
            to_id("ENT_TYPE_ITEM_STICKYTRAP_PIECE"),
            to_id("ENT_TYPE_ITEM_STICKYTRAP_LASTPIECE"),
            to_id("ENT_TYPE_ITEM_TENTACLE"),
            to_id("ENT_TYPE_ITEM_TENTACLE_PIECE"),
            to_id("ENT_TYPE_ITEM_TENTACLE_LAST_PIECE"),
        };
    case CUSTOM_TYPE::CHAINEDPUSHBLOCK:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_CHAINEDPUSHBLOCK")};
    case CUSTOM_TYPE::CHEST:
        return {to_id("ENT_TYPE_ITEM_CHEST")};
    case CUSTOM_TYPE::CINEMATICANCHOR:
        return {to_id("ENT_TYPE_LOGICAL_CINEMATIC_ANCHOR")};
    case CUSTOM_TYPE::CITYOFGOLDDOOR:
        return {to_id("ENT_TYPE_FLOOR_DOOR_COG")};
    case CUSTOM_TYPE::CLAMBASE:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_GIANTCLAM_BASE")};
    case CUSTOM_TYPE::CLAW:
        return {to_id("ENT_TYPE_ITEM_CRABMAN_CLAW")};
    case CUSTOM_TYPE::CLIMBABLEROPE:
        return {
            to_id("ENT_TYPE_ITEM_CLIMBABLE_ROPE"),
            to_id("ENT_TYPE_ITEM_UNROLLED_ROPE"),
        };
    case CUSTOM_TYPE::CLONEGUNSHOT:
        return {to_id("ENT_TYPE_ITEM_CLONEGUNSHOT")};
    case CUSTOM_TYPE::COBRA:
        return {to_id("ENT_TYPE_MONS_COBRA")};
    case CUSTOM_TYPE::COFFIN:
        return {
            to_id("ENT_TYPE_ITEM_COFFIN"),
            to_id("ENT_TYPE_ITEM_ANUBIS_COFFIN"),
        };
    case CUSTOM_TYPE::COIN:
        return {to_id("ENT_TYPE_ITEM_GOLDCOIN")};
    case CUSTOM_TYPE::CONTAINER:
        return {
            to_id("ENT_TYPE_ITEM_CRATE"),
            to_id("ENT_TYPE_ITEM_DMCRATE"),
            to_id("ENT_TYPE_ITEM_PRESENT"),
            to_id("ENT_TYPE_ITEM_GHIST_PRESENT"),
            to_id("ENT_TYPE_ITEM_ALIVE_EMBEDDED_ON_ICE"),
        };
    case CUSTOM_TYPE::CONVEYORBELT:
        return {
            to_id("ENT_TYPE_FLOOR_CONVEYORBELT_LEFT"),
            to_id("ENT_TYPE_FLOOR_CONVEYORBELT_RIGHT"),
        };
    case CUSTOM_TYPE::COOKFIRE:
        return {to_id("ENT_TYPE_ITEM_COOKFIRE")};
    case CUSTOM_TYPE::CRABMAN:
        return {to_id("ENT_TYPE_MONS_CRABMAN")};
    case CUSTOM_TYPE::CRITTER:
        return {
            to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE"),
            to_id("ENT_TYPE_MONS_CRITTERBUTTERFLY"),
            to_id("ENT_TYPE_MONS_CRITTERSNAIL"),
            to_id("ENT_TYPE_MONS_CRITTERFISH"),
            to_id("ENT_TYPE_MONS_CRITTERANCHOVY"),
            to_id("ENT_TYPE_MONS_CRITTERCRAB"),
            to_id("ENT_TYPE_MONS_CRITTERLOCUST"),
            to_id("ENT_TYPE_MONS_CRITTERPENGUIN"),
            to_id("ENT_TYPE_MONS_CRITTERFIREFLY"),
            to_id("ENT_TYPE_MONS_CRITTERDRONE"),
            to_id("ENT_TYPE_MONS_CRITTERSLIME"),
        };
    case CUSTOM_TYPE::CRITTERBEETLE:
        return {to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE")};
    case CUSTOM_TYPE::CRITTERBUTTERFLY:
        return {to_id("ENT_TYPE_MONS_CRITTERBUTTERFLY")};
    case CUSTOM_TYPE::CRITTERCRAB:
        return {to_id("ENT_TYPE_MONS_CRITTERCRAB")};
    case CUSTOM_TYPE::CRITTERDRONE:
        return {to_id("ENT_TYPE_MONS_CRITTERDRONE")};
    case CUSTOM_TYPE::CRITTERFIREFLY:
        return {to_id("ENT_TYPE_MONS_CRITTERFIREFLY")};
    case CUSTOM_TYPE::CRITTERFISH:
        return {to_id("ENT_TYPE_MONS_CRITTERFISH")};
    case CUSTOM_TYPE::CRITTERLOCUST:
        return {to_id("ENT_TYPE_MONS_CRITTERLOCUST")};
    case CUSTOM_TYPE::CRITTERPENGUIN:
        return {to_id("ENT_TYPE_MONS_CRITTERPENGUIN")};
    case CUSTOM_TYPE::CRITTERSLIME:
        return {to_id("ENT_TYPE_MONS_CRITTERSLIME")};
    case CUSTOM_TYPE::CRITTERSNAIL:
        return {to_id("ENT_TYPE_MONS_CRITTERSNAIL")};
    case CUSTOM_TYPE::CROCMAN:
        return {to_id("ENT_TYPE_MONS_CROCMAN")};
    case CUSTOM_TYPE::CROSSBEAM:
        return {to_id("ENT_TYPE_DECORATION_CROSS_BEAM")};
    case CUSTOM_TYPE::CRUSHTRAP:
        return {
            to_id("ENT_TYPE_ACTIVEFLOOR_CRUSH_TRAP"),
            to_id("ENT_TYPE_ACTIVEFLOOR_CRUSH_TRAP_LARGE"),
        };
    case CUSTOM_TYPE::CURSEDEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_CURSED_EFFECT")};
    case CUSTOM_TYPE::CURSEDPOT:
        return {to_id("ENT_TYPE_ITEM_CURSEDPOT")};
    case CUSTOM_TYPE::DECORATEDDOOR:
        return {
            to_id("ENT_TYPE_FLOOR_DOOR_COG"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD"),
        };
    case CUSTOM_TYPE::DECOREGENERATINGBLOCK:
        return {
            to_id("ENT_TYPE_DECORATION_REGENERATING_SMALL_BLOCK"),
            to_id("ENT_TYPE_DECORATION_REGENERATING_BORDER"),
        };
    case CUSTOM_TYPE::DESTRUCTIBLEBG:
        return {to_id("ENT_TYPE_DECORATION_DUAT_DESTRUCTIBLE_BG")};
    case CUSTOM_TYPE::DMALIENBLAST:
        return {to_id("ENT_TYPE_LOGICAL_DM_ALIEN_BLAST")};
    case CUSTOM_TYPE::DMSPAWNING:
        return {
            to_id("ENT_TYPE_LOGICAL_DM_CRATE_SPAWNING"),
            to_id("ENT_TYPE_LOGICAL_DM_IDOL_SPAWNING"),
        };
    case CUSTOM_TYPE::DOOR:
        return {
            to_id("ENT_TYPE_FLOOR_DOOR_ENTRANCE"),
            to_id("ENT_TYPE_FLOOR_DOOR_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_MAIN_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_STARTING_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_LAYER"),
            to_id("ENT_TYPE_FLOOR_DOOR_LAYER_DROP_HELD"),
            to_id("ENT_TYPE_FLOOR_DOOR_GHISTSHOP"),
            to_id("ENT_TYPE_FLOOR_DOOR_LOCKED"),
            to_id("ENT_TYPE_FLOOR_DOOR_LOCKED_PEN"),
            to_id("ENT_TYPE_FLOOR_DOOR_COG"),
            to_id("ENT_TYPE_FLOOR_DOOR_MOAI_STATUE"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP_ATREZZO"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP_ROOM"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD"),
        };
    case CUSTOM_TYPE::DRILL:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_DRILL")};
    case CUSTOM_TYPE::DUSTWALLAPEP:
        return {to_id("ENT_TYPE_LOGICAL_DUSTWALL_APEP")};
    case CUSTOM_TYPE::EGGPLANTMINISTER:
        return {to_id("ENT_TYPE_MONS_EGGPLANT_MINISTER")};
    case CUSTOM_TYPE::EGGPLANTTHROWER:
        return {to_id("ENT_TYPE_LOGICAL_EGGPLANT_THROWER")};
    case CUSTOM_TYPE::EGGSAC:
        return {to_id("ENT_TYPE_ITEM_EGGSAC")};
    case CUSTOM_TYPE::EGGSHIPCENTERJETFLAME:
        return {to_id("ENT_TYPE_FX_EGGSHIP_CENTERJETFLAME")};
    case CUSTOM_TYPE::EGGSHIPDOOR:
        return {
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP_ATREZZO"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP_ROOM"),
        };
    case CUSTOM_TYPE::EGGSHIPDOORS:
        return {to_id("ENT_TYPE_FLOOR_DOOR_EGGSHIP")};
    case CUSTOM_TYPE::ELEVATOR:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_ELEVATOR")};
    case CUSTOM_TYPE::EMPRESSGRAVE:
        return {to_id("ENT_TYPE_ITEM_EMPRESS_GRAVE")};
    case CUSTOM_TYPE::ENTITY:
        return {0};
    case CUSTOM_TYPE::EXCALIBUR:
        return {to_id("ENT_TYPE_ITEM_EXCALIBUR")};
    case CUSTOM_TYPE::EXITDOOR:
        return {
            to_id("ENT_TYPE_FLOOR_DOOR_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_MAIN_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_STARTING_EXIT"),
            to_id("ENT_TYPE_FLOOR_DOOR_COG"),
            to_id("ENT_TYPE_FLOOR_DOOR_EGGPLANT_WORLD"),
        };
    case CUSTOM_TYPE::EXPLOSION:
        return {
            to_id("ENT_TYPE_FX_EXPLOSION"),
            to_id("ENT_TYPE_FX_POWEREDEXPLOSION"),
            to_id("ENT_TYPE_FX_MODERNEXPLOSION"),
        };
    case CUSTOM_TYPE::FALLINGPLATFORM:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_FALLING_PLATFORM")};
    case CUSTOM_TYPE::FIREBALL:
        return {
            to_id("ENT_TYPE_ITEM_FIREBALL"),
            to_id("ENT_TYPE_ITEM_HUNDUN_FIREBALL"),
        };
    case CUSTOM_TYPE::FIREBUG:
        return {to_id("ENT_TYPE_MONS_FIREBUG")};
    case CUSTOM_TYPE::FIREBUGUNCHAINED:
        return {to_id("ENT_TYPE_MONS_FIREBUG_UNCHAINED")};
    case CUSTOM_TYPE::FIREFROG:
        return {to_id("ENT_TYPE_MONS_FIREFROG")};
    case CUSTOM_TYPE::FISH:
        return {to_id("ENT_TYPE_MONS_FISH")};
    case CUSTOM_TYPE::FLAME:
        return {
            to_id("ENT_TYPE_ITEM_WHIP_FLAME"),
            to_id("ENT_TYPE_ITEM_SPARK"),
            to_id("ENT_TYPE_ITEM_FLAMETHROWER_FIREBALL"),
            to_id("ENT_TYPE_ITEM_WALLTORCHFLAME"),
            to_id("ENT_TYPE_ITEM_TORCHFLAME"),
            to_id("ENT_TYPE_ITEM_LAMPFLAME"),
            to_id("ENT_TYPE_FX_SMALLFLAME"),
        };
    case CUSTOM_TYPE::FLAMESIZE:
        return {
            to_id("ENT_TYPE_ITEM_WHIP_FLAME"),
            to_id("ENT_TYPE_ITEM_WALLTORCHFLAME"),
        };
    case CUSTOM_TYPE::FLOOR:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_FLOOR_BORDERTILE");
            const auto end = to_id("ENT_TYPE_FLOORSTYLED_GUTS") + 1;
            result.reserve(end - idx + 2);
            for (; idx < end; idx++)
                result.push_back(idx);

            result.push_back(to_id("ENT_TYPE_EMBED_GOLD"));
            result.push_back(to_id("ENT_TYPE_EMBED_GOLD_BIG"));
        }
        return result;
    }
    case CUSTOM_TYPE::FLY:
        return {to_id("ENT_TYPE_ITEM_FLY")};
    case CUSTOM_TYPE::FLYHEAD:
        return {to_id("ENT_TYPE_ITEM_GIANTFLY_HEAD")};
    case CUSTOM_TYPE::FORCEFIELD:
        return {
            to_id("ENT_TYPE_FLOOR_FORCEFIELD"),
            to_id("ENT_TYPE_FLOOR_DICE_FORCEFIELD"),
            to_id("ENT_TYPE_FLOOR_CHALLENGE_ENTRANCE"),
            to_id("ENT_TYPE_FLOOR_CHALLENGE_WAITROOM"),
            to_id("ENT_TYPE_FLOOR_TIMED_FORCEFIELD"),
        };
    case CUSTOM_TYPE::FORESTSISTER:
        return {
            to_id("ENT_TYPE_MONS_SISTER_PARSLEY"),
            to_id("ENT_TYPE_MONS_SISTER_PARSNIP"),
            to_id("ENT_TYPE_MONS_SISTER_PARMESAN"),
        };
    case CUSTOM_TYPE::FROG:
        return {
            to_id("ENT_TYPE_MONS_FROG"),
            to_id("ENT_TYPE_MONS_FIREFROG"),
        };
    case CUSTOM_TYPE::FROSTBREATHEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_FROST_BREATH")};
    case CUSTOM_TYPE::FROZENLIQUID:
        return {to_id("ENT_TYPE_ITEM_FROZEN_LIQUID")};
    case CUSTOM_TYPE::FXALIENBLAST:
        return {
            to_id("ENT_TYPE_FX_ALIENBLAST_RETICULE_INTERNAL"),
            to_id("ENT_TYPE_FX_ALIENBLAST_RETICULE_EXTERNAL"),
            to_id("ENT_TYPE_FX_ALIENBLAST"),
        };
    case CUSTOM_TYPE::FXANKHBROKENPIECE:
        return {to_id("ENT_TYPE_FX_ANKH_BROKENPIECE")};
    case CUSTOM_TYPE::FXANKHROTATINGSPARK:
        return {to_id("ENT_TYPE_FX_ANKH_ROTATINGSPARK")};
    case CUSTOM_TYPE::FXCOMPASS:
        return {
            to_id("ENT_TYPE_FX_COMPASS"),
            to_id("ENT_TYPE_FX_SPECIALCOMPASS"),
        };
    case CUSTOM_TYPE::FXEMPRESS:
        return {to_id("ENT_TYPE_FX_EMPRESS")};
    case CUSTOM_TYPE::FXFIREFLYLIGHT:
        return {to_id("ENT_TYPE_FX_CRITTERFIREFLY_LIGHT")};
    case CUSTOM_TYPE::FXHUNDUNNECKPIECE:
        return {to_id("ENT_TYPE_FX_HUNDUN_NECK_PIECE")};
    case CUSTOM_TYPE::FXJELLYFISHSTAR:
        return {to_id("ENT_TYPE_FX_MEGAJELLYFISH_STAR")};
    case CUSTOM_TYPE::FXJETPACKFLAME:
        return {to_id("ENT_TYPE_FX_JETPACKFLAME")};
    case CUSTOM_TYPE::FXKINGUSLIDING:
        return {to_id("ENT_TYPE_FX_KINGU_SLIDING")};
    case CUSTOM_TYPE::FXLAMASSUATTACK:
        return {to_id("ENT_TYPE_FX_LAMASSU_ATTACK")};
    case CUSTOM_TYPE::FXMAINEXITDOOR:
        return {to_id("ENT_TYPE_FX_MAIN_EXIT_DOOR")};
    case CUSTOM_TYPE::FXNECROMANCERANKH:
        return {to_id("ENT_TYPE_FX_NECROMANCER_ANKH")};
    case CUSTOM_TYPE::FXOUROBORODRAGONPART:
        return {
            to_id("ENT_TYPE_FX_OUROBORO_HEAD"),
            to_id("ENT_TYPE_FX_OUROBORO_TAIL"),
        };
    case CUSTOM_TYPE::FXOUROBOROOCCLUDER:
        return {to_id("ENT_TYPE_FX_OUROBORO_OCCLUDER")};
    case CUSTOM_TYPE::FXPICKUPEFFECT:
        return {to_id("ENT_TYPE_FX_PICKUPEFFECT")};
    case CUSTOM_TYPE::FXPLAYERINDICATOR:
        return {to_id("ENT_TYPE_FX_PLAYERINDICATOR")};
    case CUSTOM_TYPE::FXQUICKSAND:
        return {
            to_id("ENT_TYPE_FX_QUICKSAND_DUST"),
            to_id("ENT_TYPE_FX_QUICKSAND_RUBBLE"),
        };
    case CUSTOM_TYPE::FXSALECONTAINER:
        return {to_id("ENT_TYPE_FX_SALEDIALOG_CONTAINER")};
    case CUSTOM_TYPE::FXSHOTGUNBLAST:
        return {to_id("ENT_TYPE_FX_SHOTGUNBLAST")};
    case CUSTOM_TYPE::FXSORCERESSATTACK:
        return {to_id("ENT_TYPE_FX_SORCERESS_ATTACK")};
    case CUSTOM_TYPE::FXSPARKSMALL:
        return {to_id("ENT_TYPE_FX_SPARK_SMALL")};
    case CUSTOM_TYPE::FXSPRINGTRAPRING:
        return {to_id("ENT_TYPE_FX_SPRINGTRAP_RING")};
    case CUSTOM_TYPE::FXTIAMATHEAD:
        return {to_id("ENT_TYPE_FX_TIAMAT_HEAD")};
    case CUSTOM_TYPE::FXTIAMATTAIL:
        return {
            to_id("ENT_TYPE_FX_TIAMAT_TAIL"),
            to_id("ENT_TYPE_FX_TIAMAT_TAIL_DECO1"),
            to_id("ENT_TYPE_FX_TIAMAT_TAIL_DECO2"),
            to_id("ENT_TYPE_FX_TIAMAT_TAIL_DECO3"),
        };
    case CUSTOM_TYPE::FXTIAMATTORSO:
        return {to_id("ENT_TYPE_FX_TIAMAT_TORSO")};
    case CUSTOM_TYPE::FXTORNJOURNALPAGE:
        return {to_id("ENT_TYPE_FX_TORNJOURNALPAGE")};
    case CUSTOM_TYPE::FXUNDERWATERBUBBLE:
        return {to_id("ENT_TYPE_FX_UNDERWATER_BUBBLE")};
    case CUSTOM_TYPE::FXVATBUBBLE:
        return {to_id("ENT_TYPE_FX_VAT_BUBBLE")};
    case CUSTOM_TYPE::FXWATERDROP:
        return {to_id("ENT_TYPE_FX_WATER_DROP")};
    case CUSTOM_TYPE::FXWEBBEDEFFECT:
        return {to_id("ENT_TYPE_FX_WEBBEDEFFECT")};
    case CUSTOM_TYPE::FXWITCHDOCTORHINT:
        return {to_id("ENT_TYPE_FX_WITCHDOCTOR_HINT")};
    case CUSTOM_TYPE::GENERATOR:
        return {
            to_id("ENT_TYPE_FLOOR_FACTORY_GENERATOR"),
            to_id("ENT_TYPE_FLOOR_SHOPKEEPER_GENERATOR"),
            to_id("ENT_TYPE_FLOOR_SUNCHALLENGE_GENERATOR"),
        };
    case CUSTOM_TYPE::GHIST:
        return {
            to_id("ENT_TYPE_MONS_GHIST"),
            to_id("ENT_TYPE_MONS_GHIST_SHOPKEEPER"),
        };
    case CUSTOM_TYPE::GHOST:
        return {
            to_id("ENT_TYPE_MONS_GHOST"),
            to_id("ENT_TYPE_MONS_GHOST_MEDIUM_SAD"),
            to_id("ENT_TYPE_MONS_GHOST_MEDIUM_HAPPY"),
            to_id("ENT_TYPE_MONS_GHOST_SMALL_ANGRY"),
            to_id("ENT_TYPE_MONS_GHOST_SMALL_SAD"),
            to_id("ENT_TYPE_MONS_GHOST_SMALL_SURPRISED"),
            to_id("ENT_TYPE_MONS_GHOST_SMALL_HAPPY"),
        };
    case CUSTOM_TYPE::GHOSTBREATH:
        return {to_id("ENT_TYPE_ITEM_PLAYERGHOST_BREATH")};
    case CUSTOM_TYPE::GIANTCLAMTOP:
        return {to_id("ENT_TYPE_ITEM_GIANTCLAM_TOP")};
    case CUSTOM_TYPE::GIANTFISH:
        return {to_id("ENT_TYPE_MONS_GIANTFISH")};
    case CUSTOM_TYPE::GIANTFLY:
        return {to_id("ENT_TYPE_MONS_GIANTFLY")};
    case CUSTOM_TYPE::GIANTFROG:
        return {to_id("ENT_TYPE_MONS_GIANTFROG")};
    case CUSTOM_TYPE::GOLDBAR:
        return {
            to_id("ENT_TYPE_ITEM_GOLDBAR"),
            to_id("ENT_TYPE_ITEM_GOLDBARS"),
        };
    case CUSTOM_TYPE::GOLDMONKEY:
        return {to_id("ENT_TYPE_MONS_GOLDMONKEY")};
    case CUSTOM_TYPE::GRUB:
        return {to_id("ENT_TYPE_MONS_GRUB")};
    case CUSTOM_TYPE::GUN:
        return {
            to_id("ENT_TYPE_ITEM_WEBGUN"),
            to_id("ENT_TYPE_ITEM_SHOTGUN"),
            to_id("ENT_TYPE_ITEM_FREEZERAY"),
            to_id("ENT_TYPE_ITEM_CAMERA"),
            to_id("ENT_TYPE_ITEM_PLASMACANNON"),
            to_id("ENT_TYPE_ITEM_SCEPTER"),
            to_id("ENT_TYPE_ITEM_CLONEGUN"),
        };
    case CUSTOM_TYPE::HANGANCHOR:
        return {to_id("ENT_TYPE_ITEM_HANGANCHOR")};
    case CUSTOM_TYPE::HANGSPIDER:
        return {to_id("ENT_TYPE_MONS_HANGSPIDER")};
    case CUSTOM_TYPE::HANGSTRAND:
        return {to_id("ENT_TYPE_ITEM_HANGSTRAND")};
    case CUSTOM_TYPE::HERMITCRAB:
        return {to_id("ENT_TYPE_MONS_HERMITCRAB")};
    case CUSTOM_TYPE::HONEY:
        return {to_id("ENT_TYPE_ITEM_HONEY")};
    case CUSTOM_TYPE::HORIZONTALFORCEFIELD:
        return {to_id("ENT_TYPE_FLOOR_HORIZONTAL_FORCEFIELD")};
    case CUSTOM_TYPE::HORNEDLIZARD:
        return {to_id("ENT_TYPE_MONS_HORNEDLIZARD")};
    case CUSTOM_TYPE::HOVERPACK:
        return {to_id("ENT_TYPE_ITEM_HOVERPACK")};
    case CUSTOM_TYPE::HUNDUN:
        return {to_id("ENT_TYPE_MONS_HUNDUN")};
    case CUSTOM_TYPE::HUNDUNCHEST:
        return {to_id("ENT_TYPE_ITEM_ENDINGTREASURE_HUNDUN")};
    case CUSTOM_TYPE::HUNDUNHEAD:
        return {
            to_id("ENT_TYPE_MONS_HUNDUN_BIRDHEAD"),
            to_id("ENT_TYPE_MONS_HUNDUN_SNAKEHEAD"),
        };
    case CUSTOM_TYPE::ICESLIDINGSOUND:
        return {to_id("ENT_TYPE_LOGICAL_ICESLIDING_SOUND_SOURCE")};
    case CUSTOM_TYPE::IDOL:
        return {
            to_id("ENT_TYPE_ITEM_IDOL"),
            to_id("ENT_TYPE_ITEM_MADAMETUSK_IDOL"),
        };
    case CUSTOM_TYPE::IMP:
        return {to_id("ENT_TYPE_MONS_IMP")};
    case CUSTOM_TYPE::JETPACK:
        return {
            to_id("ENT_TYPE_ITEM_JETPACK"),
            to_id("ENT_TYPE_ITEM_JETPACK_MECH"),
        };
    case CUSTOM_TYPE::JIANGSHI:
        return {
            to_id("ENT_TYPE_MONS_JIANGSHI"),
            to_id("ENT_TYPE_MONS_FEMALE_JIANGSHI"),
        };
    case CUSTOM_TYPE::JUMPDOG:
        return {to_id("ENT_TYPE_MONS_JUMPDOG")};
    case CUSTOM_TYPE::JUNGLESPEARCOSMETIC:
        return {to_id("ENT_TYPE_ITEM_JUNGLE_SPEAR_COSMETIC")};
    case CUSTOM_TYPE::JUNGLETRAPTRIGGER:
        return {to_id("ENT_TYPE_LOGICAL_JUNGLESPEAR_TRAP_TRIGGER")};
    case CUSTOM_TYPE::KAPALAPOWERUP:
        return {to_id("ENT_TYPE_ITEM_POWERUP_KAPALA")};
    case CUSTOM_TYPE::KINGU:
        return {to_id("ENT_TYPE_MONS_KINGU")};
    case CUSTOM_TYPE::LAHAMU:
        return {to_id("ENT_TYPE_MONS_ALIENQUEEN")};
    case CUSTOM_TYPE::LAMASSU:
        return {to_id("ENT_TYPE_MONS_LAMASSU")};
    case CUSTOM_TYPE::LAMPFLAME:
        return {to_id("ENT_TYPE_ITEM_LAMPFLAME")};
    case CUSTOM_TYPE::LANDMINE:
        return {to_id("ENT_TYPE_ITEM_LANDMINE")};
    case CUSTOM_TYPE::LASERBEAM:
        return {
            to_id("ENT_TYPE_ITEM_LASERBEAM"),
            to_id("ENT_TYPE_ITEM_HORIZONTALLASERBEAM"),
        };
    case CUSTOM_TYPE::LASERTRAP:
        return {to_id("ENT_TYPE_FLOOR_LASER_TRAP")};
    case CUSTOM_TYPE::LAVA:
        return {
            to_id("ENT_TYPE_LIQUID_LAVA"),
            to_id("ENT_TYPE_LIQUID_STAGNANT_LAVA"),
            to_id("ENT_TYPE_LIQUID_COARSE_LAVA"),
        };
    case CUSTOM_TYPE::LAVAMANDER:
        return {to_id("ENT_TYPE_MONS_LAVAMANDER")};
    case CUSTOM_TYPE::LEAF:
        return {to_id("ENT_TYPE_ITEM_LEAF")};
    case CUSTOM_TYPE::LEPRECHAUN:
        return {to_id("ENT_TYPE_MONS_LEPRECHAUN")};
    case CUSTOM_TYPE::LIGHTARROW:
        return {to_id("ENT_TYPE_ITEM_LIGHT_ARROW")};
    case CUSTOM_TYPE::LIGHTARROWPLATFORM:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_LIGHTARROWPLATFORM")};
    case CUSTOM_TYPE::LIGHTEMITTER:
        return {
            to_id("ENT_TYPE_ITEM_SCEPTER_ANUBISSHOT"),
            to_id("ENT_TYPE_ITEM_SCEPTER_ANUBISSPECIALSHOT"),
            to_id("ENT_TYPE_ITEM_SCEPTER_PLAYERSHOT"),
            to_id("ENT_TYPE_ITEM_TIAMAT_SHOT"),
            to_id("ENT_TYPE_ITEM_REDLANTERNFLAME"),
            to_id("ENT_TYPE_ITEM_LANDMINE"),
            to_id("ENT_TYPE_ITEM_PLAYERGHOST"),
            to_id("ENT_TYPE_ITEM_PALACE_CANDLE_FLAME"),
            to_id("ENT_TYPE_ITEM_LAVAPOT"),
            to_id("ENT_TYPE_FX_TELEPORTSHADOW"),
        };
    case CUSTOM_TYPE::LIGHTSHOT:
        return {
            to_id("ENT_TYPE_ITEM_PLASMACANNON_SHOT"),
            to_id("ENT_TYPE_ITEM_UFO_LASER_SHOT"),
            to_id("ENT_TYPE_ITEM_LAMASSU_LASER_SHOT"),
            to_id("ENT_TYPE_ITEM_SORCERESS_DAGGER_SHOT"),
            to_id("ENT_TYPE_ITEM_LASERTRAP_SHOT"),
            to_id("ENT_TYPE_ITEM_FIREBALL"),
            to_id("ENT_TYPE_ITEM_HUNDUN_FIREBALL"),
            to_id("ENT_TYPE_ITEM_FREEZERAYSHOT"),
            to_id("ENT_TYPE_ITEM_CLONEGUNSHOT"),
        };
    case CUSTOM_TYPE::LIMBANCHOR:
        return {to_id("ENT_TYPE_LOGICAL_LIMB_ANCHOR")};
    case CUSTOM_TYPE::LIQUID:
        return {
            to_id("ENT_TYPE_LIQUID_WATER"),
            to_id("ENT_TYPE_LIQUID_COARSE_WATER"),
            to_id("ENT_TYPE_LIQUID_LAVA"),
            to_id("ENT_TYPE_LIQUID_STAGNANT_LAVA"),
            to_id("ENT_TYPE_LIQUID_COARSE_LAVA"),
        };
    case CUSTOM_TYPE::LIQUIDSURFACE:
        return {
            to_id("ENT_TYPE_FX_LAVA_GLOW"),
            to_id("ENT_TYPE_FX_WATER_SURFACE"),
        };
    case CUSTOM_TYPE::LOCKEDDOOR:
        return {
            to_id("ENT_TYPE_FLOOR_DOOR_LOCKED"),
            to_id("ENT_TYPE_FLOOR_DOOR_LOCKED_PEN"),
        };
    case CUSTOM_TYPE::LOGICALANCHOVYFLOCK:
        return {to_id("ENT_TYPE_LOGICAL_ANCHOVY_FLOCK")};
    case CUSTOM_TYPE::LOGICALCONVEYORBELTSOUND:
        return {to_id("ENT_TYPE_LOGICAL_CONVEYORBELT_SOUND_SOURCE")};
    case CUSTOM_TYPE::LOGICALDOOR:
        return {
            to_id("ENT_TYPE_LOGICAL_DOOR"),
            to_id("ENT_TYPE_LOGICAL_BLACKMARKET_DOOR"),
        };
    case CUSTOM_TYPE::LOGICALDRAIN:
        return {
            to_id("ENT_TYPE_LOGICAL_WATER_DRAIN"),
            to_id("ENT_TYPE_LOGICAL_LAVA_DRAIN"),
        };
    case CUSTOM_TYPE::LOGICALLIQUIDSTREAMSOUND:
        return {
            to_id("ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE"),
        };
    case CUSTOM_TYPE::LOGICALMINIGAME:
        return {to_id("ENT_TYPE_LOGICAL_MINIGAME")};
    case CUSTOM_TYPE::LOGICALREGENERATINGBLOCK:
        return {to_id("ENT_TYPE_LOGICAL_REGENERATING_BLOCK")};
    case CUSTOM_TYPE::LOGICALSOUND:
        return {
            to_id("ENT_TYPE_LOGICAL_DOOR_AMBIENT_SOUND"),
            to_id("ENT_TYPE_LOGICAL_STATICLAVA_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_CONVEYORBELT_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_MUMMYFLIES_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_QUICKSAND_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_DUSTWALL_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_ICESLIDING_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_PIPE_TRAVELER_SOUND_SOURCE"),
        };
    case CUSTOM_TYPE::LOGICALSTATICSOUND:
        return {
            to_id("ENT_TYPE_LOGICAL_STATICLAVA_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_STREAMLAVA_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_STREAMWATER_SOUND_SOURCE"),
            to_id("ENT_TYPE_LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE"),
        };
    case CUSTOM_TYPE::LOGICALTRAPTRIGGER:
        return {
            to_id("ENT_TYPE_LOGICAL_ARROW_TRAP_TRIGGER"),
            to_id("ENT_TYPE_LOGICAL_TOTEM_TRAP_TRIGGER"),
            to_id("ENT_TYPE_LOGICAL_JUNGLESPEAR_TRAP_TRIGGER"),
            to_id("ENT_TYPE_LOGICAL_SPIKEBALL_TRIGGER"),
            to_id("ENT_TYPE_LOGICAL_TENTACLE_TRIGGER"),
            to_id("ENT_TYPE_LOGICAL_BIGSPEAR_TRAP_TRIGGER"),
        };
    case CUSTOM_TYPE::MAGMAMAN:
        return {to_id("ENT_TYPE_MONS_MAGMAMAN")};
    case CUSTOM_TYPE::MAINEXIT:
        return {to_id("ENT_TYPE_FLOOR_DOOR_MAIN_EXIT")};
    case CUSTOM_TYPE::MANTRAP:
        return {to_id("ENT_TYPE_MONS_MANTRAP")};
    case CUSTOM_TYPE::MATTOCK:
        return {to_id("ENT_TYPE_ITEM_MATTOCK")};
    case CUSTOM_TYPE::MECH:
        return {to_id("ENT_TYPE_MOUNT_MECH")};
    case CUSTOM_TYPE::MEGAJELLYFISH:
        return {
            to_id("ENT_TYPE_MONS_MEGAJELLYFISH"),
            to_id("ENT_TYPE_MONS_MEGAJELLYFISH_BACKGROUND"),
        };
    case CUSTOM_TYPE::MINIGAMEASTEROID:
        return {
            to_id("ENT_TYPE_ITEM_MINIGAME_ASTEROID_BG"),
            to_id("ENT_TYPE_ITEM_MINIGAME_ASTEROID"),
            to_id("ENT_TYPE_ITEM_MINIGAME_BROKEN_ASTEROID"),
        };
    case CUSTOM_TYPE::MINIGAMESHIP:
        return {to_id("ENT_TYPE_ITEM_MINIGAME_SHIP")};
    case CUSTOM_TYPE::MINIGAMESHIPOFFSET:
        return {
            to_id("ENT_TYPE_FX_MINIGAME_SHIP_DOOR"),
            to_id("ENT_TYPE_FX_MINIGAME_SHIP_CENTERJETFLAME"),
            to_id("ENT_TYPE_FX_MINIGAME_SHIP_JETFLAME"),
        };
    case CUSTOM_TYPE::MOLE:
        return {to_id("ENT_TYPE_MONS_MOLE")};
    case CUSTOM_TYPE::MONKEY:
        return {to_id("ENT_TYPE_MONS_MONKEY")};
    case CUSTOM_TYPE::MONSTER:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_MONS_PET_TUTORIAL");
            const auto end = to_id("ENT_TYPE_MONS_GHOST_SMALL_HAPPY") + 1;
            result.reserve(end - idx + 14);
            for (; idx < end; idx++)
            {
                if (idx == to_id("ENT_TYPE_MONS_GHIST_SHOPKEEPER") + 1) // skip no id
                    continue;

                result.push_back(idx);
            }

            result.insert(result.end(), {
                                            to_id("ENT_TYPE_MONS_PET_DOG"),
                                            to_id("ENT_TYPE_MONS_PET_CAT"),
                                            to_id("ENT_TYPE_MONS_PET_HAMSTER"),
                                            to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE"),
                                            to_id("ENT_TYPE_MONS_CRITTERBUTTERFLY"),
                                            to_id("ENT_TYPE_MONS_CRITTERSNAIL"),
                                            to_id("ENT_TYPE_MONS_CRITTERFISH"),
                                            to_id("ENT_TYPE_MONS_CRITTERANCHOVY"),
                                            to_id("ENT_TYPE_MONS_CRITTERCRAB"),
                                            to_id("ENT_TYPE_MONS_CRITTERLOCUST"),
                                            to_id("ENT_TYPE_MONS_CRITTERPENGUIN"),
                                            to_id("ENT_TYPE_MONS_CRITTERFIREFLY"),
                                            to_id("ENT_TYPE_MONS_CRITTERDRONE"),
                                            to_id("ENT_TYPE_MONS_CRITTERSLIME"),
                                        });
        }
        return result;
    }
    case CUSTOM_TYPE::MOSQUITO:
        return {to_id("ENT_TYPE_MONS_MOSQUITO")};
    case CUSTOM_TYPE::MOTHERSTATUE:
        return {to_id("ENT_TYPE_FLOOR_MOTHER_STATUE")};
    case CUSTOM_TYPE::MOUNT:
        return {
            to_id("ENT_TYPE_MOUNT_TURKEY"),
            to_id("ENT_TYPE_MOUNT_ROCKDOG"),
            to_id("ENT_TYPE_MOUNT_AXOLOTL"),
            to_id("ENT_TYPE_MOUNT_MECH"),
            to_id("ENT_TYPE_MOUNT_QILIN"),
            to_id("ENT_TYPE_MOUNT_BASECAMP_CHAIR"),
            to_id("ENT_TYPE_MOUNT_BASECAMP_COUCH"),
        };
    case CUSTOM_TYPE::MOVABLE:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            result.reserve(550); // more or less
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_FX_ANKH_BROKENPIECE") + 1;
            const auto gaps = {
                to_id("ENT_TYPE_CHAR_HIREDHAND") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 2,
                to_id("ENT_TYPE_MONS_GHOST") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 2,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 1,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 2,
                to_id("ENT_TYPE_ITEM_WHIP") - 1,
                to_id("ENT_TYPE_ITEM_WHIP") - 2,
                to_id("ENT_TYPE_ITEM_WHIP") - 3,
                to_id("ENT_TYPE_ITEM_POT") - 1,
                to_id("ENT_TYPE_ITEM_GOLDBAR") - 1,
                to_id("ENT_TYPE_ITEM_GOLDBAR") - 2,
                to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE") - 1,
                to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE") - 2,
                to_id("ENT_TYPE_ITEM_PICKUP_SPECTACLES") - 1,
                to_id("ENT_TYPE_ITEM_PICKUP_PLAYERBAG") - 1,
                to_id("ENT_TYPE_ITEM_POWERUP_PASTE") - 1,
                to_id("ENT_TYPE_ITEM_CAPE") - 1,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 1,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 2,
                to_id("ENT_TYPE_ACTIVEFLOOR_EGGSHIPPLATFORM") - 3,
                to_id("ENT_TYPE_FX_EGGSHIP_SHELL") - 1,
                to_id("ENT_TYPE_FX_EGGSHIP_SHELL") - 2,
                to_id("ENT_TYPE_FX_ANKH_ROTATINGSPARK") - 1,
            };

            for (; idx < end; idx++)
            {
                if (std::find(gaps.begin(), gaps.end(), idx) != gaps.end())
                    continue;

                result.push_back(idx);
            }
        }
        return result;
    }
    case CUSTOM_TYPE::MOVINGICON:
        return {
            to_id("ENT_TYPE_FX_SALEICON"),
            to_id("ENT_TYPE_FX_DIEINDICATOR"),
            to_id("ENT_TYPE_FX_STORAGE_INDICATOR"),
        };
    case CUSTOM_TYPE::MUMMY:
        return {to_id("ENT_TYPE_MONS_MUMMY")};
    case CUSTOM_TYPE::MUMMYFLIESSOUND:
        return {to_id("ENT_TYPE_LOGICAL_MUMMYFLIES_SOUND_SOURCE")};
    case CUSTOM_TYPE::NECROMANCER:
        return {to_id("ENT_TYPE_MONS_NECROMANCER")};
    case CUSTOM_TYPE::NPC:
        return {
            to_id("ENT_TYPE_MONS_SHOPKEEPERCLONE"),
            to_id("ENT_TYPE_MONS_SISTER_PARSLEY"),
            to_id("ENT_TYPE_MONS_SISTER_PARSNIP"),
            to_id("ENT_TYPE_MONS_SISTER_PARMESAN"),
            to_id("ENT_TYPE_MONS_OLD_HUNTER"),
            to_id("ENT_TYPE_MONS_THIEF"),
            to_id("ENT_TYPE_MONS_BODYGUARD"),
            to_id("ENT_TYPE_MONS_HUNDUNS_SERVANT"),
        };
    case CUSTOM_TYPE::OCTOPUS:
        return {to_id("ENT_TYPE_MONS_OCTOPUS")};
    case CUSTOM_TYPE::OLMEC:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_OLMEC")};
    case CUSTOM_TYPE::OLMECCANNON:
        return {
            to_id("ENT_TYPE_ITEM_OLMECCANNON_BOMBS"),
            to_id("ENT_TYPE_ITEM_OLMECCANNON_UFO"),
        };
    case CUSTOM_TYPE::OLMECFLOATER:
        return {to_id("ENT_TYPE_FX_OLMECPART_FLOATER")};
    case CUSTOM_TYPE::OLMITE:
        return {
            to_id("ENT_TYPE_MONS_OLMITE_HELMET"),
            to_id("ENT_TYPE_MONS_OLMITE_BODYARMORED"),
            to_id("ENT_TYPE_MONS_OLMITE_NAKED"),
        };
    case CUSTOM_TYPE::ONFIREEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_ONFIRE_EFFECT")};
    case CUSTOM_TYPE::ORB:
        return {to_id("ENT_TYPE_ITEM_FLOATING_ORB")};
    case CUSTOM_TYPE::OSIRISHAND:
        return {to_id("ENT_TYPE_MONS_OSIRIS_HAND")};
    case CUSTOM_TYPE::OSIRISHEAD:
        return {to_id("ENT_TYPE_MONS_OSIRIS_HEAD")};
    case CUSTOM_TYPE::OUROBOROCAMERAANCHOR:
        return {to_id("ENT_TYPE_LOGICAL_OUROBORO_CAMERA_ANCHOR")};
    case CUSTOM_TYPE::OUROBOROCAMERAZOOMIN:
        return {to_id("ENT_TYPE_LOGICAL_OUROBORO_CAMERA_ANCHOR_ZOOMIN")};
    case CUSTOM_TYPE::PALACESIGN:
        return {to_id("ENT_TYPE_DECORATION_PALACE_SIGN")};
    case CUSTOM_TYPE::PARACHUTEPOWERUP:
        return {to_id("ENT_TYPE_ITEM_POWERUP_PARACHUTE")};
    case CUSTOM_TYPE::PET:
        return {
            to_id("ENT_TYPE_MONS_PET_TUTORIAL"),
            to_id("ENT_TYPE_MONS_PET_DOG"),
            to_id("ENT_TYPE_MONS_PET_CAT"),
            to_id("ENT_TYPE_MONS_PET_HAMSTER"),
        };
    case CUSTOM_TYPE::PIPE:
        return {to_id("ENT_TYPE_FLOOR_PIPE")};
    case CUSTOM_TYPE::PIPETRAVELERSOUND:
        return {to_id("ENT_TYPE_LOGICAL_PIPE_TRAVELER_SOUND_SOURCE")};
    case CUSTOM_TYPE::PLAYER:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_CHAR_EGGPLANT_CHILD") + 1;
            const auto gap = to_id("ENT_TYPE_CHAR_HIREDHAND") - 1;
            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (idx == gap)
                    continue;

                result.push_back(idx);
            }
        }
        return result;
    }
    case CUSTOM_TYPE::PLAYERBAG:
        return {to_id("ENT_TYPE_ITEM_PICKUP_PLAYERBAG")};
    case CUSTOM_TYPE::PLAYERGHOST:
        return {to_id("ENT_TYPE_ITEM_PLAYERGHOST")};
    case CUSTOM_TYPE::POISONEDEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_POISONED_EFFECT")};
    case CUSTOM_TYPE::POLEDECO:
        return {
            to_id("ENT_TYPE_FLOORSTYLED_MINEWOOD"),
            to_id("ENT_TYPE_FLOORSTYLED_PAGODA"),
        };
    case CUSTOM_TYPE::PORTAL:
        return {to_id("ENT_TYPE_LOGICAL_PORTAL")};
    case CUSTOM_TYPE::POT:
        return {to_id("ENT_TYPE_ITEM_POT")};
    case CUSTOM_TYPE::POWERUP:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_ITEM_POWERUP_PASTE");
            const auto end = to_id("ENT_TYPE_ITEM_POWERUP_SKELETON_KEY") + 1;
            result.reserve(end - idx);
            for (; idx < end; idx++)
                result.push_back(idx);
        }
        return result;
    }
    case CUSTOM_TYPE::POWERUPCAPABLE:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_CHAR_ANA_SPELUNKY");
            const auto end = to_id("ENT_TYPE_MONS_CRITTERSLIME") + 1;
            const auto missing_ids = {
                to_id("ENT_TYPE_CHAR_HIREDHAND") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 1,
                to_id("ENT_TYPE_MONS_PET_TUTORIAL") - 2,
                to_id("ENT_TYPE_MONS_GHOST") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 1,
                to_id("ENT_TYPE_MONS_PET_DOG") - 2,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 1,
                to_id("ENT_TYPE_MONS_CRITTERDUNGBEETLE") - 2,
            };

            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (std::find(missing_ids.begin(), missing_ids.end(), idx) != missing_ids.end())
                    continue;

                result.push_back(idx);
            }
        }
        return result;
    }
    case CUSTOM_TYPE::PROTOSHOPKEEPER:
        return {to_id("ENT_TYPE_MONS_PROTOSHOPKEEPER")};
    case CUSTOM_TYPE::PUNISHBALL:
        return {to_id("ENT_TYPE_ITEM_PUNISHBALL")};
    case CUSTOM_TYPE::PUSHBLOCK:
        return {
            to_id("ENT_TYPE_ACTIVEFLOOR_PUSHBLOCK"),
            to_id("ENT_TYPE_ACTIVEFLOOR_POWDERKEG"),
            to_id("ENT_TYPE_ACTIVEFLOOR_CHAINEDPUSHBLOCK"),
            to_id("ENT_TYPE_ACTIVEFLOOR_TIMEDPOWDERKEG"),
        };
    case CUSTOM_TYPE::QILIN:
        return {to_id("ENT_TYPE_MOUNT_QILIN")};
    case CUSTOM_TYPE::QUICKSAND:
        return {to_id("ENT_TYPE_FLOOR_QUICKSAND")};
    case CUSTOM_TYPE::QUICKSANDSOUND:
        return {to_id("ENT_TYPE_LOGICAL_QUICKSAND_SOUND_SOURCE")};
    case CUSTOM_TYPE::QUILLBACK:
        return {to_id("ENT_TYPE_MONS_CAVEMAN_BOSS")};
    case CUSTOM_TYPE::REGENBLOCK:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_REGENERATINGBLOCK")};
    case CUSTOM_TYPE::ROBOT:
        return {to_id("ENT_TYPE_MONS_ROBOT")};
    case CUSTOM_TYPE::ROCKDOG:
        return {to_id("ENT_TYPE_MOUNT_ROCKDOG")};
    case CUSTOM_TYPE::ROLLINGITEM:
    {
        static std::vector<ENT_TYPE> result;
        if (result.empty())
        {
            auto idx = to_id("ENT_TYPE_ITEM_PICKUP_TORNJOURNALPAGE");
            const auto end = to_id("ENT_TYPE_ITEM_PICKUP_SKELETON_KEY") + 1;
            const auto gap = to_id("ENT_TYPE_ITEM_PICKUP_SPECTACLES") - 1;
            result.reserve(end - idx);
            for (; idx < end; idx++)
            {
                if (idx == gap)
                    continue;

                result.push_back(idx);
            }
        }
        return result;
    }
    case CUSTOM_TYPE::ROOMLIGHT:
        return {to_id("ENT_TYPE_LOGICAL_ROOM_LIGHT")};
    case CUSTOM_TYPE::ROOMOWNER:
        return {
            to_id("ENT_TYPE_MONS_SHOPKEEPER"),
            to_id("ENT_TYPE_MONS_MERCHANT"),
            to_id("ENT_TYPE_MONS_YANG"),
            to_id("ENT_TYPE_MONS_MADAMETUSK"),
            to_id("ENT_TYPE_MONS_STORAGEGUY"),
        };
    case CUSTOM_TYPE::RUBBLE:
        return {to_id("ENT_TYPE_ITEM_RUBBLE")};
    case CUSTOM_TYPE::SCARAB:
        return {to_id("ENT_TYPE_MONS_SCARAB")};
    case CUSTOM_TYPE::SCEPTERSHOT:
        return {
            to_id("ENT_TYPE_ITEM_SCEPTER_ANUBISSHOT"),
            to_id("ENT_TYPE_ITEM_SCEPTER_PLAYERSHOT"),
        };
    case CUSTOM_TYPE::SCORPION:
        return {to_id("ENT_TYPE_MONS_SCORPION")};
    case CUSTOM_TYPE::SHIELD:
        return {
            to_id("ENT_TYPE_ITEM_WOODEN_SHIELD"),
            to_id("ENT_TYPE_ITEM_METAL_SHIELD"),
        };
    case CUSTOM_TYPE::SHOOTINGSTARSPAWNER:
        return {to_id("ENT_TYPE_LOGICAL_SHOOTING_STARS_SPAWNER")};
    case CUSTOM_TYPE::SHOPKEEPER:
        return {to_id("ENT_TYPE_MONS_SHOPKEEPER")};
    case CUSTOM_TYPE::SKELETON:
        return {
            to_id("ENT_TYPE_MONS_SKELETON"),
            to_id("ENT_TYPE_MONS_REDSKELETON"),
        };
    case CUSTOM_TYPE::SKULLDROPTRAP:
        return {to_id("ENT_TYPE_ITEM_SKULLDROPTRAP")};
    case CUSTOM_TYPE::SLEEPBUBBLE:
        return {to_id("ENT_TYPE_FX_SLEEP_BUBBLE")};
    case CUSTOM_TYPE::SLIDINGWALLCEILING:
        return {to_id("ENT_TYPE_FLOOR_SLIDINGWALL_CEILING")};
    case CUSTOM_TYPE::SNAPTRAP:
        return {to_id("ENT_TYPE_ITEM_SNAP_TRAP")};
    case CUSTOM_TYPE::SORCERESS:
        return {to_id("ENT_TYPE_MONS_SORCERESS")};
    case CUSTOM_TYPE::SOUNDSHOT:
        return {
            to_id("ENT_TYPE_ITEM_UFO_LASER_SHOT"),
            to_id("ENT_TYPE_ITEM_LAMASSU_LASER_SHOT"),
            to_id("ENT_TYPE_ITEM_FIREBALL"),
            to_id("ENT_TYPE_ITEM_HUNDUN_FIREBALL"),
        };
    case CUSTOM_TYPE::SPARK:
        return {to_id("ENT_TYPE_ITEM_SPARK")};
    case CUSTOM_TYPE::SPARKTRAP:
        return {to_id("ENT_TYPE_FLOOR_SPARK_TRAP")};
    case CUSTOM_TYPE::SPEAR:
        return {
            to_id("ENT_TYPE_ITEM_TOTEM_SPEAR"),
            to_id("ENT_TYPE_ITEM_LION_SPEAR"),
            to_id("ENT_TYPE_ITEM_BIG_SPEAR"),
        };
    case CUSTOM_TYPE::SPECIALSHOT:
        return {to_id("ENT_TYPE_ITEM_SCEPTER_ANUBISSPECIALSHOT")};
    case CUSTOM_TYPE::SPIDER:
        return {
            to_id("ENT_TYPE_MONS_SPIDER"),
            to_id("ENT_TYPE_MONS_GIANTSPIDER"),
        };
    case CUSTOM_TYPE::SPIKEBALLTRAP:
        return {to_id("ENT_TYPE_FLOOR_SPIKEBALL_CEILING")};
    case CUSTOM_TYPE::SPLASHBUBBLEGENERATOR:
        return {to_id("ENT_TYPE_LOGICAL_SPLASH_BUBBLE_GENERATOR")};
    case CUSTOM_TYPE::STICKYTRAP:
        return {to_id("ENT_TYPE_FLOOR_STICKYTRAP_CEILING")};
    case CUSTOM_TYPE::STRETCHCHAIN:
        return {
            to_id("ENT_TYPE_ITEM_CRABMAN_CLAWCHAIN"),
            to_id("ENT_TYPE_ITEM_PUNISHCHAIN"),
        };
    case CUSTOM_TYPE::SWITCH:
        return {
            to_id("ENT_TYPE_ITEM_SLIDINGWALL_SWITCH"),
            to_id("ENT_TYPE_ITEM_SLIDINGWALL_SWITCH_REWARD"),
        };
    case CUSTOM_TYPE::TADPOLE:
        return {to_id("ENT_TYPE_MONS_TADPOLE")};
    case CUSTOM_TYPE::TELEPORTER:
        return {to_id("ENT_TYPE_ITEM_TELEPORTER")};
    case CUSTOM_TYPE::TELEPORTERBACKPACK:
        return {to_id("ENT_TYPE_ITEM_TELEPORTER_BACKPACK")};
    case CUSTOM_TYPE::TELEPORTINGBORDER:
        return {to_id("ENT_TYPE_FLOOR_TELEPORTINGBORDER")};
    case CUSTOM_TYPE::TELESCOPE:
        return {to_id("ENT_TYPE_ITEM_TELESCOPE")};
    case CUSTOM_TYPE::TENTACLE:
        return {to_id("ENT_TYPE_ITEM_TENTACLE")};
    case CUSTOM_TYPE::TENTACLEBOTTOM:
        return {to_id("ENT_TYPE_FLOOR_TENTACLE_BOTTOM")};
    case CUSTOM_TYPE::TERRA:
        return {to_id("ENT_TYPE_MONS_MARLA_TUNNEL")};
    case CUSTOM_TYPE::THINICE:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_THINICE")};
    case CUSTOM_TYPE::TIAMAT:
        return {to_id("ENT_TYPE_MONS_TIAMAT")};
    case CUSTOM_TYPE::TIAMATSHOT:
        return {to_id("ENT_TYPE_ITEM_TIAMAT_SHOT")};
    case CUSTOM_TYPE::TIMEDFORCEFIELD:
        return {to_id("ENT_TYPE_FLOOR_TIMED_FORCEFIELD")};
    case CUSTOM_TYPE::TIMEDPOWDERKEG:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_TIMEDPOWDERKEG")};
    case CUSTOM_TYPE::TIMEDSHOT:
        return {to_id("ENT_TYPE_ITEM_FREEZERAYSHOT")};
    case CUSTOM_TYPE::TORCH:
        return {
            to_id("ENT_TYPE_ITEM_WALLTORCH"),
            to_id("ENT_TYPE_ITEM_LITWALLTORCH"),
            to_id("ENT_TYPE_ITEM_AUTOWALLTORCH"),
            to_id("ENT_TYPE_ITEM_TORCH"),
            to_id("ENT_TYPE_ITEM_LAMP"),
            to_id("ENT_TYPE_ITEM_REDLANTERN"),
        };
    case CUSTOM_TYPE::TORCHFLAME:
        return {to_id("ENT_TYPE_ITEM_TORCHFLAME")};
    case CUSTOM_TYPE::TOTEMTRAP:
        return {
            to_id("ENT_TYPE_FLOOR_TOTEM_TRAP"),
            to_id("ENT_TYPE_FLOOR_LION_TRAP"),
        };
    case CUSTOM_TYPE::TRANSFERFLOOR:
        return {
            to_id("ENT_TYPE_FLOOR_CONVEYORBELT_LEFT"),
            to_id("ENT_TYPE_FLOOR_CONVEYORBELT_RIGHT"),
        };
    case CUSTOM_TYPE::TRAPPART:
        return {
            to_id("ENT_TYPE_ITEM_STICKYTRAP_BALL"),
            to_id("ENT_TYPE_ACTIVEFLOOR_CHAINED_SPIKEBALL"),
            to_id("ENT_TYPE_ACTIVEFLOOR_SLIDINGWALL"),
        };
    case CUSTOM_TYPE::TREASURE:
        return {
            to_id("ENT_TYPE_ITEM_ENDINGTREASURE_TIAMAT"),
            to_id("ENT_TYPE_ITEM_ENDINGTREASURE_HUNDUN"),
        };
    case CUSTOM_TYPE::TREASUREHOOK:
        return {to_id("ENT_TYPE_ITEM_EGGSHIP_HOOK")};
    case CUSTOM_TYPE::TRUECROWNPOWERUP:
        return {to_id("ENT_TYPE_ITEM_POWERUP_TRUECROWN")};
    case CUSTOM_TYPE::TUN:
        return {to_id("ENT_TYPE_MONS_MERCHANT")};
    case CUSTOM_TYPE::TV:
        return {to_id("ENT_TYPE_ITEM_TV")};
    case CUSTOM_TYPE::UDJATSOCKET:
        return {to_id("ENT_TYPE_ITEM_UDJAT_SOCKET")};
    case CUSTOM_TYPE::UFO:
        return {to_id("ENT_TYPE_MONS_UFO")};
    case CUSTOM_TYPE::UNCHAINEDSPIKEBALL:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_UNCHAINED_SPIKEBALL")};
    case CUSTOM_TYPE::USHABTI:
        return {to_id("ENT_TYPE_ITEM_USHABTI")};
    case CUSTOM_TYPE::VAMPIRE:
        return {
            to_id("ENT_TYPE_MONS_VAMPIRE"),
            to_id("ENT_TYPE_MONS_VLAD"),
        };
    case CUSTOM_TYPE::VANHORSING:
        return {to_id("ENT_TYPE_MONS_OLD_HUNTER")};
    case CUSTOM_TYPE::VLAD:
        return {to_id("ENT_TYPE_MONS_VLAD")};
    case CUSTOM_TYPE::VLADSCAPE:
        return {to_id("ENT_TYPE_ITEM_VLADS_CAPE")};
    case CUSTOM_TYPE::WADDLER:
        return {to_id("ENT_TYPE_MONS_STORAGEGUY")};
    case CUSTOM_TYPE::WALKINGMONSTER:
        return {
            to_id("ENT_TYPE_MONS_CAVEMAN"),
            to_id("ENT_TYPE_MONS_CAVEMAN_SHOPKEEPER"),
            to_id("ENT_TYPE_MONS_CAVEMAN_BOSS"),
            to_id("ENT_TYPE_MONS_TIKIMAN"),
            to_id("ENT_TYPE_MONS_WITCHDOCTOR"),
            to_id("ENT_TYPE_MONS_ROBOT"),
            to_id("ENT_TYPE_MONS_CROCMAN"),
            to_id("ENT_TYPE_MONS_SORCERESS"),
            to_id("ENT_TYPE_MONS_NECROMANCER"),
            to_id("ENT_TYPE_MONS_OCTOPUS"),
            to_id("ENT_TYPE_MONS_YETI"),
            to_id("ENT_TYPE_MONS_OLMITE_HELMET"),
            to_id("ENT_TYPE_MONS_OLMITE_BODYARMORED"),
            to_id("ENT_TYPE_MONS_OLMITE_NAKED"),
            to_id("ENT_TYPE_MONS_LEPRECHAUN"),
        };
    case CUSTOM_TYPE::WALLTORCH:
        return {
            to_id("ENT_TYPE_ITEM_WALLTORCH"),
            to_id("ENT_TYPE_ITEM_LITWALLTORCH"),
            to_id("ENT_TYPE_ITEM_AUTOWALLTORCH"),
        };
    case CUSTOM_TYPE::WEBSHOT:
        return {to_id("ENT_TYPE_ITEM_WEBSHOT")};
    case CUSTOM_TYPE::WETEFFECT:
        return {to_id("ENT_TYPE_LOGICAL_WET_EFFECT")};
    case CUSTOM_TYPE::WITCHDOCTOR:
        return {to_id("ENT_TYPE_MONS_WITCHDOCTOR")};
    case CUSTOM_TYPE::WITCHDOCTORSKULL:
        return {to_id("ENT_TYPE_MONS_WITCHDOCTORSKULL")};
    case CUSTOM_TYPE::WOODENLOGTRAP:
        return {to_id("ENT_TYPE_ACTIVEFLOOR_WOODENLOG_TRAP")};
    case CUSTOM_TYPE::YAMA:
        return {to_id("ENT_TYPE_MONS_YAMA")};
    case CUSTOM_TYPE::YANG:
        return {to_id("ENT_TYPE_MONS_YANG")};
    case CUSTOM_TYPE::YELLOWCAPE:
        return {to_id("ENT_TYPE_ITEM_CAPE")};
    case CUSTOM_TYPE::YETIKING:
        return {to_id("ENT_TYPE_MONS_YETIKING")};
    case CUSTOM_TYPE::YETIQUEEN:
        return {to_id("ENT_TYPE_MONS_YETIQUEEN")};
    }
    return {};
}

bool is_type_movable(ENT_TYPE type)
{
    auto movable_types = get_custom_entity_types(CUSTOM_TYPE::MOVABLE);
    if (std::find(movable_types.begin(), movable_types.end(), type) != movable_types.end())
        return true;

    return false;
}

const std::map<CUSTOM_TYPE, std::string> get_custom_types_map()
{
    return custom_type_names;
}
